#!/bin/bash
#
# $Id: kurenmactl 100 2016-10-12 12:42:52+04:00 toor $
#
_kurenma_sVersion=0.5
#
_bashlyk=kurenma _bashlyk_log=nouse . bashlyk
#
#
#
#****h* command/kurenmactl
#
#  USAGE
#
#    kurenmactl [ start | stop ]
#
#  DESCRIPTION
#
#    kurenmactl - part of the kurenma package, management tool for kurenmad(8)
#    daemon. Command is intended for use in the service management system, such
#    as SystemV or SystemD.
#
#  OPTIONS
#
#    start
#           Start the kurenmad(8) in daemon mode  (without  leading  terminal).
#           The  environment  variable  START_KURENMA  with  value  "NO"  (case
#           insensitive) prevents launch of service.
#
#    stop
#           Gracefully stop the kurenmad(8)
#
#  SEE ALSO
#
#    kurenmad(8), kurenma.ini(5)
#
#******
udfUsage() {

    	local -a aId=( $( grep -Po '\044Id\072 \S+ \d+ \S+ \S+ \S+ \044' $0 ) )

	printf -- "\t%s v%s rev%s, Kurenma Service Management Tool, (c) %s\n" "$(_ s0)" "$_kurenma_sVersion" "${aId[2]}" "${aId[3]}"

	cat <<-EOF | tr -d '#'

		Usage: $(_ s0) start|stop
		where:

#			start	- start service
#			stop	- stop  service
#
#		without arguments show this usage and exit

	EOF
	eval $(udfOnError exit)

}
udfMain() {

	DEBUGLEVEL=3

	[[ $UID == 0 ]] || eval $( udfOnError throw iErrorNotPermitted "You must be root to run this." )

	if [[ $START_KURENMA =~ ^([Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|0)$ ]]; then

		udfDebug 1 "service starting disabled, see /etc/default/kurenma.."
		return 0

	fi

	udfThrowOnCommandNotFound cat echo grep head kurenmad mkdir nohup sleep tr

	local cmd cmdNetcat fnCtl ini pathIni pathRun pid portAuth s

	cmd=kurenmad
	pathIni=$( _ pathIni )
	pathRun=$( _ pathRun )

	udfThrowOnEmptyVariable pathIni pathRun

	mkdir -p $pathRun || eval $( udfOnError throw NotExistNotCreated "$pathRun" )

	ini=${pathIni}/kurenma.ini
	fnCtl=${pathRun}/kurenma.pid

	udfIni $ini ':portAuth'

	: ${portAuth:=42912}
	cmdNetcat="nc -k -l -v $portAuth"

	eval set -- $(_ sArg)

	case "$1" in

		start)
			udfDebug 1 "service $cmd starting.."

			cd /
			nohup $cmd </dev/null >/dev/null 2>/dev/null &

			return 0
		;;

		 stop)
			udfDebug 1 "service $cmd stopping.."

			echo stop >> $fnCtl
			udfStopProcess $cmdNetcat

			for s in 1 1 1 1 1 1 1 1; do

				sleep 1.1
				[[ -s ${pathRun}/${cmd}.pid ]] && pid=$( head -n 1 ${pathRun}/${cmd}.pid )
				udfIsNumber $pid || break

			done

			udfStopProcess $pid $cmd
			s=$?

			[[ $s == $( _ iErrorNoSuchProcess ) ]] && s=0

			return $s
		;;

		    *)
			udfDebug 1 && udfUsage
			return 1
		;;

	esac

	return 0
}
#
#
#
udfMain
#
