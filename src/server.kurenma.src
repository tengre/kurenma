#
# $Id: server.kurenma.src 221 2018-08-19 15:56:41+04:00 toor $
#
_bashlyk=kurenma . bashlyk
#
#
#
#
kurenma-server::resetCounters() {

  bRevoked=0
  cn=''
  tsStart=0
  tsWait=60

}
#
kurenma-server::closeConnection() {

  err::debug 3 "client $cn - exchange completed"

  kurenma-server::resetCounters

  echo "exchange completed"
  sleep 1
  echo "q"

}
#
kurenma-server::revoked() {

  err::debug 3 "client $cn cert revoked"
  echo "client cert revoked"

  kurenma-server::closeConnection

}
#
kurenma-server::limitConnectionTime() {

  std::isNumber $1       || error NotNumber return -- ${1:-first argument}
  std::isNumber $tsStart || error NotNumber return -- $tsStart

  (( tsStart > 0 )) || return 0
  [[ $cn ]] || error EmptyArgument return -- cn

  local i=$(( $( exec -c date "+%s" ) - $tsStart ))

  (( i > 16 )) && err::debug 3 "client $cn - exchange time is ${i}sec"

  if (( $i > $1 )); then

    err::debug 3 "client $cn - exchange down by timeout ${i}sec"
    echo "client $cn - exchange down by timeout"

    kurenma-server::closeConnection

  fi

}
#
kurenma-server::waitRequest() {

  local bIssuer='false' bRevoked=0 cn rc s tsCheck tsStart=0 tsWait=60

  std::isNumber $tsPeerTimeout || tsPeerTimeout=0

  if (( tsPeerTimeout == 0 )); then

    tsCheck=28800

  else

    tsCheck=$(( tsPeerTimeout + 60 ))

  fi

  while true; do

    read -t $tsWait s
    rc=$?

    if   (( rc > 128 )); then

      (( bRevoked > 0 )) && kurenma-server::revoked

      if (( tsStart == 0 )); then

        err::debug 3 "wait ${tsWait}sec"

        if (( (tsWait+60)/2*((tsWait-60)/10+1) > tsCheck )); then

          kurenma-server::checkConnections
          tsWait=60

        else

          tsWait=$(( tsWait + 10 ))

        fi

      fi

    elif (( rc > 0 )); then

      err::debug 3 "input closed"
      break

    elif [[ $s =~ ^signalStop$ ]]; then

      err::debug 3 "SSL server down"

      echo Q
      sleep 0.2
      break

    elif [[ $s =~ ^verify.error:num=2[016]: ]]; then

      err::debug 3 $s
      echo $s
      sleep 0.8
      echo Q
      sleep 0.2
      break

    elif [[ $s =~ ^verify.*revoked.* ]]; then

      err::debug 3 "warn: $cn revoked certificate"
      bRevoked=1
      tsWait=2

    elif [[ $s =~ depth=0.*CN.* ]]; then

      rc="${s/depth=0/subject:}"
      s="${s##*, CN = }"
      s="${s%,*}"

      [[ "$s" == "$cn" ]] && continue || cn=$s

      err::debug 3 "client $cn - exchange started"
      err::debug 3 "SSL: $rc"
      rc=0

      tsStart=$( exec -c date "+%s" )
      tsWait=4

    elif [[ $bIssuer == 'false' && $s =~ depth=1.*CN.* ]]; then

      err::debug 3 "SSL: ${s/depth=1/ issuer:}"
      bIssuer='true'

    elif [[ $s =~ client-data.* ]]; then

      if (( bRevoked > 0 )); then

        err::debug 3 "client data ignored"

      else

        s=${s##*client-data}
        err::debug 5 "client data: ${s:1:10}<skip>"
        kurenma-server::handleRequest $cn ${s:1:45}

        sleep 0.1
        kurenma-server::closeConnection

      fi

    else

      if (( DEBUGLEVEL >= 6 )); then

        err::debug 6 "SSL: $s"

      elif [[ ${s,,} =~ ^cipher|error|accept|unable ]]; then

        err::debug 3 "SSL: $s"

      fi

    fi

    kurenma-server::limitConnectionTime 32

  done

}
#
kurenma-server::inactivityConnections() {

  errorify on EmptyVariable dev || return

  std::isNumber $tsPeerTimeout || tsPeerTimeout=0

  (( tsPeerTimeout == 0 )) && return 0

  local i s

  for s in $( wg show $dev latest-handshakes | tr '\t' ':' | xargs ); do

    ## TODO errorify
    std::isNumber ${s##*:} || continue

    #ignore too low timestamps
    (( ${s##*:} < 1800 )) && continue

    i=$(( $( exec -c date +%s ) - ${s##*:} ))

    if (( i >= tsPeerTimeout )); then

      wg set $dev peer ${s%%:*} remove
      err::debugf 2                                                            \
        "peer %s is removed due to inactivity over an %d sec.. %d\n"           \
        "${s:0:10}<skip>" "${i}" "$?"

    fi

  done

}
#
kurenma-server::checkConnections() {

  throw on EmptyVariable dev pathDat

  local fn fnLeased s

  kurenma-server::inactivityConnections

  for s in $( wg show $dev allowed-ips | grep none | cut -f 1 | xargs ); do

    wg set $dev peer $s remove
    err::debug 3 "${dev}: peer ${s:0:10}<skip> is removed as unused .. $?"

  done

  if [[ $cn ]]; then

    fnLeased=${pathDat}/${cn}.${dev}.leased

    if [[ -f $fnLeased ]]; then

      std::temp fn

      for s in $( exec -c wg show $dev peers ); do

        grep ":${s:0:10}$" $fnLeased

      done > $fn

      mv -f $fn $fnLeased

    fi

  fi

}
#
kurenma-server::handleRequest() {

  throw on MissingArgument "$1" "$2"

  throw on EmptyVariable dev pathDat pathIni pool tsKeepalive server

  local aCIDR cmdWG cnClient fmt fn fnLeased i ip ipClient peer s

  cnClient=$1
  peer=$2
  fmt="\n%s - prepare tunnel settings (client public key=%s) on %s:\n"

  fnLeased=${pathDat}/${cn}.${dev}.leased

  err::debugf 4 "$fmt" "$cnClient" "${peer:0:10}<skip>" "$dev"

  kurenma-server::checkConnections

  if [[ "$pool" == "commonname" ]]; then

    if ipClient=$( net::ipv4.host $cnClient ); then

      if grep -qsw $ipClient < <( net::ipv4.range $server ); then

        err::debug 3 "$cnClient - lease of the IP by Common Name $ipClient"

      else

        err::debug 3 "$cnClient - $ipClient is out of range for tunnel $server"
        ipClient=''

      fi

    else

      err::debug 3 "$cnClient - IP-address by Common Name not resolved.."

    fi

  fi

  if [[ ! $ipClient || $pool == "dynamic" ]]; then

    [[ -f $fnLeased ]] || touch $fnLeased

    ipClient=$(                                                                \
                                                                               \
      grep -P "^${cnClient}:\S+$" $fnLeased |tail -n 1| cut -f 2 -d':'|xargs   \
                                                                               \
    )

    if ipClient=$( net::ipv4.host $ipClient ); then

      err::debug 3 "$cnClient - lease of the early used IP $ipClient"

    else

      ipClient=''

    fi

  fi

  if [[ ${server%/*} == $ipClient ]]; then

    err::debug 3 "the IP address $ipClient is already in use, skipped"

    ipClient=''

  fi

  if [[ ! $ipClient ]]; then

    s="$( exec -c wg show $dev allowed-ips )"

    for ipClient in $( net::ipv4.range $server ); do

      [[ ${server%/*} == $ipClient ]] && continue
      [[ $s =~ ${ipClient}/32 ]] && continue

      err::debug 3 "$cnClient - lease of the dynamic IP - $ipClient"
      break

    done

  fi

  if [[ ! $ipClient || ${server%/*} == $ipClient ]]; then

    error InvalidArgument warn+return -- not allocated IP to the client..

  fi

  aCIDR=$( net::ipv4.cidr ${ipClient}/32 ${aIpsAllowed[@]} )

  err::debug 3 "$cnClient - allowed ips - $aCIDR"

  std::temp fn

  cmdWG="$(                                                                    \
                                                                               \
    printf -- 'wg set %s peer %s allowed-ips %s persistent-keepalive %d'       \
              "$dev" "$peer" "${aCIDR// /,}" "$tsKeepalive"                    \
                                                                               \
  )"

  if $cmdWG >$fn 2>&1; then

    printf -- 'OK:%s:%s:%s:%s:%s\n'                                            \
              "$( wg show $dev private-key | wg pubkey )"                      \
              "$( exec -c wg show $dev listen-port )"                          \
              "${ipClient}"                                                    \
              "${server%/*}"                                                   \
              "${server#*/}"

    echo "${cnClient}:${ipClient}:$(exec -c date +%s):${peer:0:10}" >> $fnLeased

  else

    echo "Server internal error - tunnel configuration aborted..."
    error InvalidArgument warn -- invalid command $cmdWG - $(< $fn)
    rm -f $fn

  fi

  err::debug 1 "server configuration updated."

  wg showconf $dev > ${pathIni}/${cn}.${dev}.conf
  chmod 0600 ${pathIni}/${cn}.${dev}.conf

}
#
kurenma-server::setupTunnel() {

  throw on EmptyVariable dev server port

  err::debugf 3 && "Init WireGuard device %s" "$dev"

  try {

    ip link del dev $dev 2>/dev/null || true
    ip link add dev $dev type wireguard
    ip address add $server dev $dev
    wg set $dev private-key <(wg genkey) listen-port $port
    ip link set up dev $dev

  } catch {

    err::exception.message
    exit $?

  }

  err::debugf 3 "init new server pub key: %s<skip>\n" \
                "$( wg show $dev private-key | wg pubkey | head -c 10 )"

  return 0

}
#
# exported function
#
kurenma-daemon::service() {

  [[ $UID == 0 ]] ||
    error NotPermitted warn+exit -- You must be root to run this.

  exit+warn on CommandNotFound cut kill ps sort

  throw on EmptyVariable cn dev fnCrt fnKey pathCA pathCrt pathKey port        \
                         portAuth server

  local cmdSSL fn fnDH

  if [[ ! ( $( wg|grep $dev ) && $( ip addr show $dev|grep ${server%/*} ) ) ]];
  then

    kurenma-server::setupTunnel

  fi

  fnDH=${pathCrt}/dh2048.pem

  cmdSSL="$(                                                                   \
                                                                               \
    printf --                                                                  \
      "openssl s_server -Verify 2 -crl_check_all -bugs -hack                   \
       -accept %s                                                              \
       %s                                                                      \
       -dhparam %s                                                             \
       -CApath %s                                                              \
       -cert %s                                                                \
       -key %s                                                                 \
      "                                                                        \
      "$portAuth"                                                              \
      "$protocol"                                                              \
      "$fnDH"                                                                  \
      "$pathCA"                                                                \
      "$fnCrt"                                                                 \
      "$fnKey"                                                                 \
                                                                               \
  )"

  cmdSSL=$( std::trim $cmdSSL )

  err::debug 6 "openssl command line: $cmdSSL"

  pid::stop openssl s_.*kurenma

  while true; do

    err::debug 3 "Daemon for WireGuard clients (re)started.."

    ## TODO throw log
    throw on NoSuchFileOrDir $fnCrt $fnKey $pathCA $pathCrt $pathKey

    std::temp fn type=pipe

    export _kurenma_control_channel=$fn

    kurenma-server::waitRequest < $fn | $cmdSSL > $fn 2>&1 &

    pid::onExit.stop $!

    wait $!
    rm -f $fn

    kurenma-daemon::waitSignal 0.2 || break

  done

}
#
#
#
