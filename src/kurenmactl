#!/bin/bash
#
# $Id: kurenmactl 172 2017-06-11 20:33:40+04:00 toor $
#
_kurenma_pathLib=/usr/share/kurenma
#
_bashlyk=kurenma _bashlyk_log=nouse . bashlyk
#
#
#
#****h* command/kurenmactl
#
#  USAGE
#
#    kurenmactl [ start | stop ]
#
#  DESCRIPTION
#
#    kurenmactl - part of the kurenma package, management tool for kurenmad(8)
#    daemon. Command is intended for use in the service management system, such
#    as SystemV or SystemD.
#
#  OPTIONS
#
#    start
#           Start the kurenmad(8) in daemon mode  (without  leading  terminal).
#           The  environment  variable  START_KURENMA  with  value  "NO"  (case
#           insensitive) prevents launch of service.
#
#    stop
#           Gracefully stop the kurenmad(8)
#
#  SEE ALSO
#
#    kurenmad(8), kurenma.ini(5)
#
#******
kurenmactl::usage() {

  local -a a

  if [[ -s ${_kurenma_pathLib}/VERSION ]]; then

    a=( $( < ${_kurenma_pathLib}/VERSION ) )
    printf -- "\t%s %s.%s %s, Kurenma Service Management Tool, (c) 2016-%s\n"  \
              "${0##*/}" "${a[0]}" "${a[1]}" "${a[2]}" "$( exec -c date +%Y )"

  elif a=($( exec -c grep -Po '\044Id\072 \S+ \d+ \S+ \S+ \S+ \044' $0 )); then

    printf -- "\t%s rev%s %s, Kurenma Service Management Tool, (c) 2016-%s\n"  \
              "${0##*/}" "${a[2]}" "${a[3]}" "$( exec -c date +%Y )"

  fi

  cat <<-EOF | tr -d '#'

    Usage: $( _ s0 ) start|stop
    where:

    #      start - start service
    #      stop  - stop  service
    #
    #    without arguments show this usage and exit

EOF

  exit

}
#
#
#
kurenmactl::main() {

  DEBUGLEVEL=3

  [[ $UID == 0 ]] || on error warn+exit NotPermitted "You must be root to run this."

  if [[ $START_KURENMA =~ ^([Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|0)$ ]]; then

    err::debug 1 "service starting disabled, see /etc/default/kurenma.."
    return 0

  fi

  exit+warn on CommandNotFound cat echo grep head kurenmad mkdir nohup sleep tr

  local cmd fnPid ini pathRun pid portAuth s

      cmd=kurenmad
  pathRun=$( _ pathRun )

  throw on EmptyVariable pathRun

  mkdir -p $pathRun || on error throw NotExistNotCreated "$pathRun"

  eval set -- $( _ sArg )

  case "$1" in

    start)
      err::debug 1 "service $cmd starting.."

      cd /
      nohup $cmd </dev/null >/dev/null 2>/dev/null &

      return 0
    ;;

     stop)
      err::debug 1 && echo -n "service $cmd stopping.."

      fnPid="${pathRun}/${cmd}.pid"
      [[ -s $fnPid ]] && pid=$( exec -c head -n 1 $fnPid ) || pid=''

      std::isNumber $pid && kill -31 $pid

      for s in 1 2 3 4 5 6 7 8; do

          [[ -s $fnPid ]] && pid=$( exec -c head -n 1 $fnPid ) || pid=''

          std::isNumber $pid || break

          sleep 0.75 && err::debug 1 && echo -n "."

      done

      echo ""

      std::isNumber $pid && pid::stop pid=$pid $cmd || true
      s=$?

      [[ $s == $( _ iErrorNoSuchProcess ) ]] && s=0

      return $s
    ;;

        *)
      err::debug 1 && kurenmactl::usage
      return 1
    ;;

  esac

  return 0
}
#
#
#
kurenmactl::main
#
