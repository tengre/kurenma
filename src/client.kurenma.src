#
# $Id: client.kurenma.src 225 2018-08-24 23:25:02+04:00 yds $
#
_bashlyk=kurenma . bashlyk
#
#
#
kurenma-client::knocking() {

  throw on EmptyVariable fnCA host portAuth

  local i s

  i=256

  s=$(                                                                         \
                                                                               \
    openssl x509 -sha1 -in $fnCA -noout -fingerprint | sed -r -e               \
    "s/^SHA1 Fing.*nt=(..):(..):(..):(..):(..):(..):.*$/0x\1\2 0x\3\4 0x\5\6/" \
                                                                               \
  )

  [[ $s ]] || error EmptyResult throw -- $fnCA - not valid format

  err::debugf 6 "CA cert fingerprint header: %s\n" "$s"

  s=$( printf -- "%d %d %d" $s ) || \
    error InvalidArgument throw -- $fnCA - hexadecimal data expected

  err::debugf 5 "knock ports sequence: %s\n" "$s"
  err::debugf 2 "check server %s availibity: " "$host"

  while true; do

    if [[ $protocol =~ ^dtls ]]; then

      ping -c 3 $host            >/dev/null 2>&1 && break

    else

      nc -w 3 -z $host $portAuth >/dev/null 2>&1 && break

    fi

    ! (( i % 32 )) && echo ""

    err::debug 2 && echo -n "."

    if ! (( i % 8 )); then

      knock $host $s >/dev/null 2>&1
      err::debug 2 && echo -n "!"

    fi

    if ! kurenma-daemon::waitSignal 1; then

      echo "x"
      return $( _ iErrorAbortedBySignal )

    fi

    i=$(( i-1 ))

    if (( $i <= 0 )); then

      printf -- "\nfail after 256 attempts.. try again\n"
      error NotAvailable warn -- ${host}:${portAuth}
      i=256

    fi

  done >&2

  return 0

}
#
kurenma-client::getTunnelSettings() {

  throw on EmptyVariable cmdSSL cn fnKey host portAuth

  local fmt fnAns pidWatch sKey sPub s

  fmt="\nclient %s - prepare new session with public key = %s<skip>\n"

  s="$( _ iErrorAbortedBySignal ) stop signal received"

  std::temp fnAns

  while true; do

    kurenma-client::knocking || break

    err::debug 2 "ok."

    kurenma-daemon::waitSignal 4 || break

    sKey=$( exec -c wg genkey )
    sPub=$( exec -c wg pubkey <<< $sKey )
    err::debugf 5 && "$fmt" "$cn" "${sPub:0:10}"

    err::debugf 1 "server %s:%s - SSL exchange started\n" "$host" "$portAuth"

    (                                                                          \
                                                                               \
      err::debug 5 "watchdog of the SSL exchange started";                     \
      sleep 32;                                                                \
      pid::stop openssl s_client.*kurenma;                                     \
      err::debug 5 "watchdog of the SSL exchange completed with status $?"     \
                                                                               \
    ) &
    pidWatch=$!

    s="$( echo "client-data $sPub" | $cmdSSL | tee $fnAns | grep '^OK:' )"

    pid::stop pid=$pidWatch $0 && \
      err::debug 5 "watchdog of the SSL exchange forced stopped"

    err::debug 1 "server ${host}:${portAuth} - SSL exchange completed"

    [[ $s =~ ^OK: ]] && break

    [[ $s ]] || s="$( < $fnAns )"

    error InvalidArgument warn -- malformed answer from ${host}:${portAuth} $s

    s="$( _ iErrorAbortedBySignal ) stop signal received"
    kurenma-daemon::waitSignal 8 || break

  done >&2

  rm -f $fnAns

  echo "${s//:/ } $sKey"

  return 0

}
#
kurenma-client::setupTunnel() {

  throw on EmptyVariable dev host aIpsAllowed

  local ipBits ipClient ipServer peer port sKey
  local -a a

  read -a a || error MissingArgument warn+return -- arguments expected from stdin...

  [[ ${a[0]} == $(_ iErrorAbortedBySignal) ]] && error AbortedBySignal warn+return

  [[ ${a[0]} != "OK" ]] && error InvalidArgument warn+return

  peer=$( grep -P "^[a-zA-Z0-9+/]+={0,2}$" <<< "${a[1]}" )
  std::isNumber ${a[2]} && port=${a[2]} || port=''
  ipClient=$( net::ipv4.host ${a[3]} )
  ipServer=$( net::ipv4.host ${a[4]} )
    ipBits=${a[5]}
      sKey=${a[6]}

  err::debugf 5 "%s: tunnel public key - %s<skip>\n" "$dev" "${peer:0:10}"
  err::debugf 3 "%s: tunnel network: leased IP/netmask %s/%s, remote IP %s\n" \
     "$dev" "$ipClient" "$( net::ipv4.mask 1.1.1.1/${ipBits} )" "$ipServer"

  errorify+warn on EmptyVariable peer port ipBits ipClient ipServer || return

  err::debugf 0 "%s: setup tunnel to the server %s:%s - " "$dev" "$host" "$port"

  s="$( net::ipv4.cidr ${aIpsAllowed[@]} )"
  : ${s:=0.0.0.0/0}

  try {

    ip link del dev $dev 2>/dev/null || true
    ip link add dev $dev type wireguard

    wg set $dev private-key <( echo $sKey ) \
      peer $peer \
      allowed-ips ${s// /,} \
      persistent-keepalive $tsKeepalive \
      endpoint "${host}:${port}"

    ## TODO netmask hardcoded
    ip address add "${ipClient}/${ipBits}" dev $dev
    ip link set up dev $dev

   } catch {

      err::exception.message
      exit $?

   }

  return 0

}
#
kurenma-client::defaultRoute() {

  throw on EmptyVariable dev _peIPv4

  local s

  s="$( wg show $dev endpoints | sed -re 's/.*\t(.*):.*/\1/' )"
  err::debug 4 "server endpoint: $s"

  s="$( ip route get $s | grep -Po "$_peIPv4 via $_peIPv4" )"
  err::debug 4 "route rule for server: $s"

  [[ $s ]] || error MissingArgument throw -- default route fail

  try {

      ip route add $s || true
      ip route add 0/1 dev $dev
      ip route add 128/1 dev $dev

   } catch {

      err::exception.message
      exit $?

   }

  err::debug 2 "tunnel $dev used as default route ($s)"

  return 0

}
#
# exported function
#
kurenma-daemon::service() {

  throw on CommandNotFound false knock ping tee true
  throw on EmptyVariable   bDefaultRoute cn dev host fnCA fnCrt fnKey pathCfg  \
                           portAuth tsPeerTimeout

  local bStart cmdSSL iLastHandshake s

  for s in "$fnCrt" "$fnKey" "$fnCA"; do

    [[ -f $s ]] || error NoSuchFileOrDir echo+exit -- $s

    if ! grep -Pqs '^-----(BEGIN|END)' $s; then

      error InvalidArgument echo+exit -- $s - bad format

    fi

  done

  [[ $bDefaultRoute =~ ^(false|true)$ ]] || bDefaultRoute=false

  cmdSSL="$(                                                                   \
                                                                               \
    printf --                                                                  \
      "openssl s_client -verify 1 -bugs -quiet                                 \
       -connect %s:%d                                                          \
       %s                                                                      \
       -CAfile %s                                                              \
       -cert %s                                                                \
       -key %s                                                                 \
      "                                                                        \
      "${host}" "${portAuth}"                                                  \
      "$protocol"                                                              \
      "$fnCA"                                                                  \
      "$fnCrt"                                                                 \
      "$fnKey"                                                                 \
                                                                               \
  )"

  cmdSSL=$( std::trim $cmdSSL )

  err::debug 6 "openssl command line: $cmdSSL"

  bStart=true

  while true; do

    if [[ $bStart =~ ^true$ ]]; then

      ## TODO try first use saved wg config
      ## TODO bad error handling
      bStart=false
      err::debugf 1 "%s: client %s configuration started\n" "$dev" "$cn"

      kurenma-client::setupTunnel< <( kurenma-client::getTunnelSettings ) || {

        error warn -- $dev setup tunnel settings
        break

      }

      $bDefaultRoute && kurenma-client::defaultRoute

      err::debugf 1                                                            \
        "\n%s: client %s configuration done, check peer every %d sec.\n"       \
        "$dev"                                                                 \
        "$cn"                                                                  \
        "$tsPeerTimeout"

      wg showconf $dev > ${pathCfg}/${cn}.${dev}.conf
      chmod 0600 ${pathCfg}/${cn}.${dev}.conf

      # don't requred
      ping -q -W 1 -c 3 $ipServer >/dev/null 2>&1

    fi

    s="$( wg show $dev latest-handshakes )"

    if   (( $? > 0 )) || ! std::isNumber ${s:45}; then

      err::debug 2 "${dev}: unexpected state of the tunnel ${s}"
      bStart=true

    elif (( ${s:45} == 0 )); then

      iLastHandshake=0

    else

      iLastHandshake=$(( $( std::date %s ) - ${s:45} ))
      err::debugf 2 "%s: last handshake - %5d sec\n" "$dev" "$iLastHandshake"

      if (( iLastHandshake >= tsPeerTimeout )); then

        wg set $dev peer ${s:0:44} remove
        err::debug 3 "${dev}: peer ${s:0:10}<skip> deleted as outdated.. $?"
        bStart=true

      fi

    fi

    if [[ $bStart =~ ^true$ ]]; then

      kurenma-daemon::waitSignal 8 || break

    else

      bStart=false
      kurenma-daemon::waitSignal $tsPeerTimeout || break

    fi

  done

}
#
#
#
