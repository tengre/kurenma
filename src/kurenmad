#!/bin/bash
#
# $Id: kurenmad 102 2016-10-12 21:37:56+04:00 toor $"
#
_bashlyk=kurenma . bashlyk
#
#
#
_bashlyk_iErrorNotAvailable=166
_bashlyk_hError[$_bashlyk_iErrorNotAvailable]="target is not available"
_kurenma_pathLib=/usr/share/kurenma
#
#
#
#****h* kurenma/.
#
#  DESCRIPTION
#
#    kurenma  is a package that includes tools for configuration and control
#    WireGuard tunnels.
#
#  COMMANDS
#
#    kurenmactl
#        management tool for kurenmad(8) daemon
#
#    kurenmad
#        daemon for automatic configuration and control of the WireGuard tunnels
#
#    gen-ssl-kurenma
#        generate   CA   infrastructure   based   on   OpenSSL   and   x.509
#        certificate/key pair for client and server peers
#
#    setup-knockd
#        get   knock-sequence   of   port   numbers   from   the    server's
#        X.509-certificate and write the appropriate section of the settings
#        in the knockd.conf(5) configuration file. Only required for  server
#        roles
#
#    update-firehol
#        adds  the  IP-address to the white list of the firehol(1) firewall.
#        It's designed to run from the service knockd(1) to allow  WireGuard
#        client access
#
#  SEE ALSO
#       kurenmactl(8), kurenmad(8), kurenma.ini(5), gen-ssl-kurenma(8),
#       update-firehol(8), setup-knockd(8), firehol(1), knockd(1), knockd.conf(5)
#******
#****h* kurenma/command
#  DESCRIPTION
#
#    This section described commands of package
#
#******
#****h* kurenma/configuration
#  DESCRIPTION
#
#    This section described configurations of package
#
#******
#****h* command/kurenmad
#
#  USAGE
#
#    kurenmad
#
#  DESCRIPTION
#
#    kurenmad - daemon for automatic configuration and control of the WireGuard
#    tunnels.
#    Depending on the role, kurenmad acts as a server that receives requests
#    to  create  WireGuard  tunnel or as a client requesting the creation of
#    such a tunnel. For key exchanging used X.509 certificates.
#
#  SEE ALSO
#
#    kurenma(7), kurenmactl(8), kurenma.ini(5)
#
#******
udfGetTimeInSec() {

	if [[ "$1" == "-v" ]]; then

		udfIsValidVariable "$2" || eval $( udfOnError2 iErrorNotValidArgument "$2 - variable name required" )

		[[ "$3" == "-v" ]] && eval $( udfOnError2 iErrorNotValidArgument "$3 - number with time suffix expected" )

		eval 'export $2="$( udfGetTimeInSec $3 )"'
		[[ -n ${!2} ]] || eval 'export $2="$( udfGetTimeInSec $4 )"'
		[[ -n ${!2} ]] || eval $( udfOnError2 iErrorEmptyResult "$2" )

		return $?

	fi

	local i=${1%%[[:alpha:]]*}

	udfIsNumber $i || eval $( udfOnError2 iErrorNotValidArgument "$i - number expected" )

	case ${1##*[[:digit:]]} in

		seconds|second|sec|s|'') echo $i;;
		   minutes|minute|min|m) echo $(( i*60 ));;
		        hours|hour|hr|h) echo $(( i*3600 ));;
		             days|day|d) echo $(( i*3600*24 ));;
		           weeks|week|w) echo $(( i*3600*24*7 ));;
		       months|month|mon) echo $(( i*3600*24*30 ));;
		           years|year|y) echo $(( i*3600*24*365 ));;
	                              *) echo ""
                                       eval $( udfOnError2 iErrorNotValidArgument "$1 - number with time suffix expected" )

	esac

    return $?

}
#
udfWatchdog() {

	udfOn EmptyOrMissingArgument throw "$1"
	udfIsNumber $2 || eval $( udfOnError2 throw iErrorNonValidArgument "$2" )

	sleep $2 &
	udfAddPid2Clean $!
	wait $!
	
#	local i=0
#
#	while true; do
#
#		i=$((i+1))
#
#		if [[ -s $1 && $( tail -n 1 $1 ) == "stop" ]]; then
#
#			i=$(_ iErrorAbortedBySignal)
#			break
#
#		fi
#
#		sleep 1
#
#		if (( i >= $2 )); then
#
#			i=0
#			break
#
#		fi
#
#	done

}
#
udfShowPeerInfo() {

	udfThrowOnEmptyVariable dev

	printf -- "\n\nWireGuard interface %s info:\n-----------------------------\n\n" "$dev"

	wg show $dev | sed -re "s/(peer:|public.?key[ :]|private.?key[ :]).*$/\1 <hidden>/ig"

	ip addr show $dev | grep inet

	printf -- "\n----\n"

}
#
udfSignal() {

    #udfThrowOnEmptyVariable portAuth
    cmdNetcat="nc -k -l -v $portAuth"
    udfStopProcess $cmdNetcat

}
#
udfMain() {

	DEBUGLEVEL=5

	udfThrowOnCommandNotFound echo grep ip mkdir nc openssl sed sleep tail wg

	[[ $UID == 0 ]] || eval $( udfOnError throw NotPermitted "You must be root to run this." )

	local -a aId
	local fnCtl ini pathCrt pathDat pathIni pathKey pathRun s
	local csvSectionMain csvSectionSSL ipsAllowed aReqOptByRole

	csvSectionMain='bDefaultRoute;dev;host;ipServer;ipClient;port;portAuth;role;tsKeepalive;tsPeerTimeout'
	csvSectionSSL='cnClient;cnServer'
	eval $( udfLocalVarFromCSV $csvSectionMain $csvSectionSSL )

	udfExitIfAlreadyStarted

	pathDat=$( _ pathDat )
	pathIni=$( _ pathIni )
	pathRun=$( _ pathRun )

	pathCrt=${pathIni}/ssl/public
	pathKey=${pathIni}/ssl/private
	ini=${pathIni}/kurenma.ini
	fnCtl=${pathRun}/kurenma.pid
	mkdir -p $pathDat || eval $( udfOnError retecho NotExistNotCreated $pathDat )

	udfIni $ini ":${csvSectionMain}" "ssl:${csvSectionSSL}" "ipsAllowed:="

	case $role in

	client)
		aReqOptByRole="cnClient host"
	;;

	server)
		aReqOptByRole="ipServer port"
		: ${ipClient:=dynamic}
		: ${ipServer:=192.168.29.1}
		: ${port:=12912}
	;;

	     *)
		eval $( udfOnError throw NotValidArgument "$role - permissible 'client' or 'server'" )
	;;

	esac

	aId=( $( grep -Po '\044Id\072 \S+ \d+ \S+ \S+ \S+ \044' $0 ) ) && s=", (с) ${aId[3]}, rev${aId[2]}"
	udfDebug 1 "start $( _ s0 ) as ${role}${s}"

	: ${dev:=wg0}
	: ${portAuth:=42912}

	udfIsNumber $tsKeepalive || tsKeepalive=0
	(( $tsKeepalive > 65355 )) && tsKeepalive=65355

	_bashlyk_sBehaviorOnError=return udfGetTimeInSec -v tsPeerTimeout $tsPeerTimeout "32min"

	udfDebug 3 "configuration:" && udfShowVariable cnServer dev ipsAllowed portAuth role tsKeepalive tsPeerTimeout $aReqOptByRole
	udfThrowOnEmptyVariable cnServer dev pathCrt pathDat pathIni pathKey pathRun portAuth role tsPeerTimeout $aRequiredByRole

	[[ -d $_kurenma_pathLib ]] || eval $( udfOnError throw NoSuchFileOrDir "$_kurenma_pathLib" )
	[[ -s ${_kurenma_pathLib}/${role}.kurenma.src ]] || eval $( udfOnError throw NoSuchFileOrDir "${role}.kurenma.src" )

	. ${_kurenma_pathLib}/${role}.kurenma.src

	echo "start" > $fnCtl

	udfService &

	wait $!

	udfFinally "service down"

}
#
#
#
udfMain
#
