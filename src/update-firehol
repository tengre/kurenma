#!/bin/bash
#
#
# $Id: update-firehol 43 2016-08-30 02:55:36+04:00 toor $
#
#
_bashlyk=kurenma . bashlyk
#
#
#
_bashlyk_iErrorTimeExpired=167
_bashlyk_hError[$_bashlyk_iErrorTimeExpired]="time expired"
#
#
#
udfGetValidIPsOnly() {

	[[ -n "$*" ]] || eval $( udfOnError return iErrorEmptyOrMissingArgument )

	local s sDig sOut

	for s in $*; do

		[[ $s =~ ^[0-9.]+$ ]] && ipcalc "$s" | grep '^INVALID ADDRESS:' && continue
		sipcalc -d4 "$s" | grep '^-\[ERR :' && continue
		sDig=$( dig +short $s | xargs )
		[[ -n "$sDig" ]] && s="$sDig"
		sOut+="$s "

	done >/dev/null 2>&1

	echo ${sOut% *} | tr ' ' '\n' | sort | uniq | xargs

	[[ -n "${sOut% *}" ]] || eval $( udfOnError return iErrorEmptyResult )

	return 0
}
#
udfMain() {

	[[ $UID == 0 ]] || eval $( udfOnError throw iErrorNotPermitted "You must be root to run this." )

	udfThrowOnCommandNotFound cp dig diff firehol flock host grep ipcalc kurenmas mv sipcalc sed sort systemctl uniq wg xargs

	local cnf csv fn fnKnock fnLock ini ipv4Black ipv4Client ipv4White pathDat pathIni s sDig

	pathDat=$( _ pathDat )
	fnKnock="${pathDat}/lastknocks.dat"
	fnLock="$( _ pathRun )/$( _ s0 ).lock"
	mkdir -p $pathDat || eval $( udfOnError throw NotExistAndNotCreated $pathDat )
	touch $fnLock || eval $( udfOnError throw NotExistAndNotCreated $fnLock )

	eval set -- $( _ sArg )

	s=$( udfGetValidIPsOnly $1 ) || eval $( udfOnError exitecho NonValidArgument "IP or hostname required" )

	if [[ -z "$_kurenma_flock" ]]; then

		udfDebug 0 "try lock from $s"
		exec env _kurenma_flock="$$" flock -x -w 99 $fnLock $0 $s $$

	fi

	if [[ "$_kurenma_flock" != "$2" ]]; then

		eval $( udfOnError retecho iErrorNotPermitted "invalid process $2" )

	fi

	udfDebug 0 "starting from $s $2"
	echo "${s}:$(date +%s)" >> $fnKnock

	pathIni=$( _ pathIni )

	for s in $pathDat $patIni; do

		[[ -n "$s" && -d "$s" ]] || eval $( udfOnError iErrorNoSuchFileOrDir "$s" )

	done

	cnf="/etc/firehol/firehol.conf"
	ini="${pathIni}/ipslist.ini"

	udfIni $ini "ipv4White:= ipv4Black:="

	udfDebug 2 && udfShowVariable ipv4White ipv4Black ipv4Client

	cp $cnf ${cnf:0:-3}bak

	ipv4Client=$( wg show | grep 'endpoint:' | sed -r -e "s/^.*t: (.*):.*$/\1/" | sort | uniq | xargs )

	touch $fnKnock
	udfMakeTemp fn

	while read s; do

		udfIsNumber ${s##*:} || continue
		#
		# 240 - time interval for safety from collisions
		#
		if (( $(date +%s) - ${s##*:} < 240 )); then

			echo "$s"
			ipv4Client+=" ${s%%:*}"

		fi

	done < $fnKnock > $fn
	mv -f $fn $fnKnock

	if udfIsValidVariable ipv4White; then

		s="ipv4White=\"$( udfGetValidIPsOnly ${ipv4White//[,;]/ } ${1//[,;]/ } $ipv4Client )\""
		[[ -z $ipv4White ]] && ipv4White='127.0.0.1'
		udfDebug 2 "new white list $s"
		sed -i -re "s/ipv4White=.*/$s/" $cnf

	fi

	if udfIsValidVariable ipv4Black; then

		s="ipv4Black=\"$( udfGetValidIPsOnly ${ipv4Black//[,;]/ } ${2//[,;]/ } )\""
		[[ -z $ipv4Black ]] && ipv4Black='1.1.1.1'
		udfDebug 2 "new black list $s"
		sed -i -re "s/ipv4Black=.*/$s/" $cnf

	fi

	printf -- "\n\n\n---> the differences (if any) --->\n"
	diff -du ${cnf:0:-3}bak $cnf
	printf -- "\n<--- ------------------------ <---\n\n\n"

	echo "Firehol configuration testing:"
	if firehol debug 2>&1 | grep -A5 "ERROR\|FAILED"; then

		echo "restore old configuration:"
		mv -v ${cnf:0:-3}bak $cnf

		eval $( udfOnError throw iErrorNotValidArgument "$* and/or $ini" )

	else

		echo " OK!"
		echo "Starting new configuration:"

		if echo commit | firehol try; then

			if [[ -n "$*" ]]; then

			    systemctl start kurenma.service

			fi

			echo " OK."

		else

			echo " FAILED.."

		fi

	fi

	udfUptime "."
}
#
#
#
udfMain
#
