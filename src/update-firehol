#!/bin/bash
#
#
# $Id: update-firehol 183 2018-01-03 00:02:30+04:00 toor $
#
#
_bashlyk=kurenma . bashlyk
#
#
#
_bashlyk_iErrorTimeExpired=167
_bashlyk_hError[$_bashlyk_iErrorTimeExpired]="time expired"
#
#
#
#****h* command/update-firehol
#
#  USAGE
#
#    update-firehol [ <IP-address> ]
#
#  DESCRIPTION
#
#    part of the kurenma(7) package, tool to configure the third-party
#    application.
#    update-firehol adds the IP-address to the white list of the  firehol(1)
#    firewall.  It's  designed  to  run  from the service knockd(1) to allow
#    WireGuard client access.
#
#  OPTIONS
#
#    <IP-address> - valid IPv4 address
#
#  SEE ALSO
#
#    firehol(1), firehol.conf(5), knockd(1), knockd.conf(5), setup-knockd(8)
#
#******
kurenma-update-firehol::main() {


  [[ $UID == 0 ]] || on error warn+exit NotPermitted "You must be root to run this."

  pid::onStarted.exit

  exit+warn on CommandNotFound cp date diff firehol flock grep kurenmactl      \
                               md5sum mkdir mv rm sed sort touch uniq wg xargs

  local cnf csv fn fnKnock fnLock ini ipv4Black ipv4Client ipv4White pathDat
  local pathIni s sDig sHost
  local -a a

  pathDat=$( _ pathDat )
  fnKnock="${pathDat}/lastknocks.dat"
  fnLock="$( _ pathRun )/$( _ s0 ).lock"
  mkdir -p $pathDat || on error throw NotExistNotCreated $pathDat
  touch $fnLock     || on error throw NotExistNotCreated $fnLock

  eval set -- $( _ sArg )

  s=$( net::ipv4.host $1 ) || on error echo+exit InvalidArgument               \
                                 "${1:-first argument}: IP or hostname required"

  if [[ ! $_kurenma_flock ]]; then

    err::debug 0 "try lock from $s"

    ## TODO check fo
    (( ${#_bashlyk_afoClean[$BASHPID]} > 0 )) \
      && rm -f ${_bashlyk_afoClean[$BASHPID]}

    exec env _kurenma_flock="$$" flock -x -w 99 $fnLock $0 $s $$

  fi

  if [[ "$_kurenma_flock" != "$2" ]]; then

    on error echo+return NotPermitted "invalid process $2"

  fi

  err::debug 0 "starting from $s with pid $2"
  echo "${s}:$( exec -c date +%s )" >> $fnKnock

  #
  # temporary fix for openssl "gethostbyname failure"
  #
  sHost="$( printf -- "%s\t%s%s" "$s" $( md5sum <<< $s) )"
  if ! grep "^${sHost//-/}$" /etc/hosts >/dev/null 2>&1; then

    echo "$sHost" >> /etc/hosts

  fi
  #
  #
  #

  pathIni=$( _ pathIni )

  throw on NoSuchFileOrDir "$pathDat" "$pathIni"

  cnf="/etc/firehol/firehol.conf"
  ini="${pathIni}/ipslist.ini"

  INI ini
  ini.load $ini [ipv4White]= [ipv4Black]=

  ## TODO get array ?
  eval "$( ini.get [ ipv4 white list ] )" && ipv4White="${a[@]}"
  eval "$( ini.get [ ipv4 black list ] )" && ipv4Black="${a[@]}"

  ini.free

  cp $cnf ${cnf:0:-3}bak

  ipv4Client=$(                                                                \
                                                                               \
    wg show | grep 'endpoint:' | sed -re "s/^.*t: (.*):.*$/\1/"                \
            | sort | uniq | xargs                                              \
                                                                               \
  )

  err::debug 2 && std::showVariable ipv4White ipv4Black ipv4Client

  touch $fnKnock
  std::temp fn

  while read s; do

    std::isNumber ${s##*:} || continue
    #
    # 240 - time interval for safety from collisions
    #
    if (( $( exec -c date +%s ) - ${s##*:} < 240 )); then

      echo "$s"
      ipv4Client+=" ${s%%:*}"

    fi

  done < $fnKnock > $fn
  mv -f $fn $fnKnock

  s=$(                                                                         \
                                                                               \
    printf -- 'ipv4White="%s"'                                                 \
      "$( net::ipv4.host ${ipv4White//[,;]/ } ${1//[,;]/ } $ipv4Client )"      \
                                                                               \
  )
  : ${ipv4White:='127.0.0.1'}
  err::debug 2 "new white list $s"
  sed -i -re "s/ipv4White=.*/$s/" $cnf

  s=$(                                                                         \
                                                                               \
    printf -- 'ipv4Black="%s"'                                                 \
      "$( net::ipv4.host ${ipv4Black//[,;]/ } ${2//[,;]/ } )"                  \
                                                                               \
  )
  : ${ipv4Black:='1.1.1.1'}
  err::debug 2 "new black list $s"
  sed -i -re "s/ipv4Black=.*/$s/" $cnf

  printf -- "\n\n\n---> the differences (if any) --->\n"
  diff -du ${cnf:0:-3}bak $cnf
  printf -- "\n<--- ------------------------ <---\n\n\n"

  echo "Firehol configuration testing:"
  if firehol debug 2>&1 | grep -A5 "ERROR\|FAILED"; then

    echo "restore old configuration:"
    mv -v ${cnf:0:-3}bak $cnf

    on error warn+exit InvalidArgument "$* and/or $ini"

  else

    echo " OK!"
    echo "Starting new configuration:"

    if firehol try <<< commit; then

      [[ ${aArg[@]} ]] && kurenmactl start

      echo " OK."

    else

      echo " FAILED.."

    fi

  fi

  std::finally "finished"

}
#
#
#
kurenma-update-firehol::main
#
