#!/bin/bash
#
# $Id: gen-ssl-kurenma 145 2017-02-19 00:56:23+04:00 toor $
#
_bashlyk=kurenma . bashlyk
#
#
#
#****h* command/gen-ssl-kurenma
#
#  USAGE
#
#    gen-ssl-kurenma ca | client|server <CommonName>
#
#  DESCRIPTION
#
#    gen-ssl-kurenma generate CA infrastructure based on OpenSSL and x.509
#    certificate/key pair for client and server peers.
#
#  OPTIONS
#
#    ca
#           generate CA infrastructure in /etc/kurenma/ssl
#
#    client <CommonName>
#           generate certificate and private key for the client with CommonName
#
#    server <CommonName>
#           generate certificate and private key for the server with CommonName
#
#  SEE ALSO
#
#    kurenma(7), openssl(1)
#
#******
udfMain() {

  udfExitIfAlreadyStarted

  [[ $UID == 0 ]] || eval $(                                                   \
                                                                               \
    udfOnError throw NotPermitted "You must be root to run this."              \
                                                                               \
  )

  udfThrowOnCommandNotFound chmod cp date echo mkdir openssl rm sed tee touch wg

  local conf confDN fnTemplate path pathCnf pathCrt pathCsr pathIni pathKey s
  local C ST L O OU CN EA

  pathIni=$( _ pathIni )
  udfThrowOnEmptyVariable pathIni

  path=${pathIni}/ssl
  pathCsr=${path}/csr
  pathCrt=${path}/public
  pathCnf=${path}/configs
  pathKey=${path}/private
  confDN=${pathIni}/dn.kurenma.ini
  fnTemplate=/usr/share/kurenma/openssl.cnf.template

  INI ini
  ini.load $confDN Common Name, Country, State, Locality, Organizational,      \
                   Organizational Unit,

   C=$( ini.get Country             ) ||  C=XX
  ST=$( ini.get State               ) || ST=State
   L=$( ini.get Locality            ) ||  L=Locality
   O=$( ini.get Organizational      ) ||  O=Organizational
  OU=$( ini.get Organizational Unit ) || OU=OrganizationalUnit
  CN=$( ini.get Common Name         ) || CN=CommonName

  ini.free

  for s in "$confDN" "$fnTemplate"; do

    udfOn NoSuchFileOrDir throw $s

  done

  eval set -- $( _ sArg )

  case "$1" in

   ca)

    if [[ -s ${pathKey}/cakey.pem && -s ${pathCrt}/cacert.pem ]]; then

      eval $(                                                                  \
                                                                               \
        udfOnError exitecho Unexpected                                         \
          "Already exist ${pathKey}/cakey.pem and/or ${pathCrt}/cacert.pem"    \
                                                                               \
      )

    fi

    mkdir -p ${path}/{public,private,configs,certs,newcerts,crl,csr}
    chmod 0710 $pathKey

    date "+%s" > ${path}/serial
    date "+%s" > ${path}/crlnumber

    rm -f ${path}/index.txt
    touch ${path}/index.txt

    conf=${pathCnf}/kurenma.ssl

    : ${EA:=email@domain.name}

    ;;

   client|server)

    [[ $2 ]] || eval $( udfOnError exitecho MissingArgument "see usage" )

    if [[ -s ${pathKey}/${2}.key && -s ${pathCrt}/${2}.crt ]]; then

      eval $(                                                                  \
                                                                               \
        udfOnError exitecho Unexpected                                         \
          "Already exist ${pathKey}/${2}.key and/or ${pathCrt}/${2}.crt"       \
                                                                               \
      )

    fi

    for s in "$path" "$pathKey" "$pathCrt" "$pathCsr" "$pathCnf"; do

      [[ -d "$s" ]] || eval $( udfOnError throw NoSuchFileOrDir "$s" )

    done

    conf=${pathCnf}/${2}.kurenma.ssl

    : ${EA:=postmaster@$2}

    OU=${2%%.*}
    CN=$2

    ;;

   *)

    echo "Error: unknown option.. ${*}"
    echo "usage: ${0##*/} ca | { client|server <CommonName> }"
    exit 1

  esac

  cp $fnTemplate $conf || eval $( udfOnError throw NoSuchFileOrDir $conf )

  for s in C ST L O OU CN EA; do

    sed -i -r -e "s/%${s}%/${!s}/ig" $conf

  done

  case "$1" in

    ca)

      openssl req -nodes -new -x509 -keyout ${pathKey}/cakey.pem \
        -out ${pathCrt}/cacert.pem -days 3650 -config $conf -verbose

    ;;

    client|server)

      sed -i -r -e "s/%nsCertType%/${1}/ig" $conf

      [[ "$1" == "server" ]] && openssl dhparam -out ${pathCrt}/dh2048.pem 2048

      openssl req -new -nodes -keyout ${pathKey}/${2}.key \
        -out ${pathCsr}/${2}.csr -config $conf -verbose

      openssl ca  -in ${pathCsr}/${2}.csr -out ${pathCrt}/${2}.crt \
        -config $conf -verbose

    ;;

  esac

  chmod 0600 ${pathKey}/*

}
#
#
#
udfMain
#
