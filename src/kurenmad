#!/bin/bash
#
# $Id: kurenmad 222 2018-08-20 01:11:10+04:00 toor $"
#
_bashlyk=kurenma . bashlyk
#
#
#
_kurenma_pathLib=/usr/share/kurenma
_kurenma_sSignal=none
#
#
#
#****h* kurenma/.
#
#  DESCRIPTION
#
#    kurenma  is a package that includes tools for configuration and control
#    WireGuard tunnels.
#
#  COMMANDS
#
#    kurenmactl
#        management tool for kurenmad(8) daemon
#
#    kurenmad
#        daemon for automatic configuration and control of the WireGuard tunnels
#
#    kurenma-ssl-gen
#        generate   CA   infrastructure   based   on   OpenSSL   and   x.509
#        certificate/key pair for client and server peers
#
#    kurenma-knockd-setup
#        get   knock-sequence   of   port   numbers   from   the    server's
#        X.509-certificate and write the appropriate section of the settings
#        in the knockd.conf(5) configuration file. Only required for  server
#        roles
#
#    kurenma-firehol-update
#        adds  the  IP-address to the white list of the firehol(1) firewall.
#        It's designed to run from the service knockd(1) to allow  WireGuard
#        client access
#
#  SEE ALSO
#       kurenmactl(8), kurenmad(8), kurenma.ini(5), kurenma-ssl-gen(8),
#       kurenma-firehol-update, kurenma-knockd-setup(8), firehol(1), knockd(1),
#       knockd.conf(5)
#******
#****h* kurenma/command
#  DESCRIPTION
#
#    This section described commands of package
#
#******
#****h* kurenma/configuration
#  DESCRIPTION
#
#    This section described configurations of package
#
#******
#****h* command/kurenmad
#
#  USAGE
#
#    kurenmad
#
#  DESCRIPTION
#
#    kurenmad - daemon for automatic configuration and control of the WireGuard
#    tunnels.
#    Depending on the role, kurenmad acts as a server that receives requests
#    to  create  WireGuard  tunnel or as a client requesting the creation of
#    such a tunnel. For key exchanging used X.509 certificates.
#
#  SEE ALSO
#
#    kurenma(7), kurenmactl(8), kurenma.ini(5)
#
#******
kurenma-daemon::waitSignal() {

  if [[ $_kurenma_sSignal == "stop" ]]; then

    err::debug 4 "Stop signal received before waiting"
    return $( _ iErrorAbortedBySignal )

  fi

  std::isDecimal $1 || error NotDecimal return -- ${1:-first argument}

  sleep ${1//-/} &
  wait $!

  if [[ $_kurenma_sSignal == "stop" ]]; then

    err::debug 4 "Stop signal is received while waiting"
    return $( _ iErrorAbortedBySignal )

  fi

  return 0

}
#
kurenma-daemon::signal() {

  [[ $_kurenma_control_channel && -p $_kurenma_control_channel ]] &&
    echo "signalStop" > $_kurenma_control_channel

  _kurenma_sSignal='stop'

  pid::stop childs sleep

  std::finally "service down initiated by signal,"

  sleep 1.8

}
#
kurenma-daemon::main() {

  DEBUGLEVEL=5

  [[ $UID == 0 ]] ||
    error NotPermitted warn+exit -- You must be root to run this.

  pid::onStarted.exit

  exit+warn on CommandNotFound grep ip mkdir nc openssl ping sed sleep tail wg

  local -a aId aIpsAllowed
  local ini fnCA fnCrt fnKey pathCA pathCrt pathDat pathCfg pathKey pathRun s
  local bDefaultRoute pool port portAuth role tsKeepalive tsPeerTimeout
  local aReqOptByRole ca cn dh dev host server protocol tsPeerInactivity
  local -r reProtocol='^((no)?ssl[23]|(no)?tls(1|1_1|1_2)|dtls1(_2)?|auto)$'


  pathDat=$( _ pathDat )
  pathCfg=$( _ pathCfg )
  pathRun=$( _ pathRun )

  pathCA=${pathCfg}/ssl/certs
  pathCrt=${pathCfg}/ssl/public
  pathKey=${pathCfg}/ssl/private
  ini=${pathCfg}/kurenma.ini

  mkdir -p $pathDat || error NotExistNotCreated echo+return -- $pathDat

  CFG ini

  ini.storage.use $ini

  ini.load     []role,tunnel name,server,listen port,tunnel network,           \
                 IP lease method,persistent keepalive,pause between checks,    \
                 default route                                                 \
                                                                               \
            [ssl]ca,cn,dh,port,protocol                                        \
                                                                               \
    [ips allowed]=

  s=$( ini.get [ips allowed] )
  eval "${s/declare -a a/declare -a aIpsAllowed}"

  role=$( ini.get role )

  case $role in

  client)

             host=$( ini.get server )
    bDefaultRoute=$( ini.get default route ) || bDefaultRoute='false'

    [[ ${aIpsAllowed[@]} ]] || aIpsAllowed[0]='0.0.0.0/0'

    tsPeerTimeout=$( std::getTimeInSec $( ini.get pause between checks ) ) ||
    tsPeerTimeout='180'

    if (( tsPeerTimeout < 60 )); then

      error InvalidArgument warn -- $tsPeerTimeout is too low, it increased to 60
      tsPeerTimeout=60

    fi

    aReqOptByRole="host"

  ;;

  server)

      pool=$(ini.get IP lease method)                  || pool='dynamic'
      port=$(ini.get listen port)                      || port='12912'
    server=$(net::ipv4.cidr $(ini.get tunnel network)) || server='192.168.29.1/24'

    tsPeerTimeout=$( std::getTimeInSec $( ini.get pause between checks ) ) ||
    tsPeerTimeout='0'

    aReqOptByRole="server pool port"

  ;;

      *)

    error InvalidArgument throw -- $role - must have client or server

  ;;

  esac

  cn=$( ini.get [ssl]cn )

  if [[ -s ${_kurenma_pathLib}/VERSION ]]; then

    a=( $( < ${_kurenma_pathLib}/VERSION ) )

    s="$(                                                                      \
         printf -- ", %s.%s %s, (c) 2016-%s\n\n"                               \
                   "${a[0]}" "${a[1]}" "${a[2]}" "$( exec -c date +%Y )"       \
      )"

  elif a=($( exec -c grep -Po '\044Id\072 \S+ \d+ \S+ \S+ \S+ \044' $0 )); then

    s="$(                                                                      \
          printf -- ", %s.%s %s, (c) 2016-%s\n\n"                              \
                    "${a[2]}" "${a[3]}" "$( exec -c date +%Y )"                \
      )"

  else

    s=

  fi

  err::debug 1 "start ${0##*/} as ${role}${s}"

       dev=$( ini.get tunnel name   ) ||      dev=wg0
  portAuth=$( ini.get [ssl]port     ) || portAuth=42912
  protocol=$( ini.get [ssl]protocol ) || protocol=auto

  if [[ ! $protocol =~ $reProtocol ]]; then

    error InvalidArgument warn -- protocol $protocol is bad, used default
    protocol='auto'

  fi

  tsKeepalive=$( ini.get persistent keepalive )
  std::isNumber $tsKeepalive || tsKeepalive=0
  (( tsKeepalive > 65355 )) && tsKeepalive=65355

  if err::debug 3; then

    printf -- "configuration:\n~~~~~~~~~~~~~~\n"
    ini.show | sed -re "s/^[[:space:]]/\xc2\xa0/"
    printf -- "~~~~~~~~~~~~~~\n"

  fi

  [[ $protocol =~ ^auto$ ]] && protocol='' || protocol="-${protocol}"

  throw on EmptyVariable cn dev pathCrt pathDat pathCfg pathKey pathRun        \
                         portAuth role tsPeerTimeout $aReqOptByRole

  fnCA=${pathCrt}/cacert.pem
  fnCrt=${pathCrt}/${cn}.crt
  fnKey=${pathKey}/${cn}.key

  throw on NoSuchDir  $_kurenma_pathLib
  throw on NoSuchFile ${_kurenma_pathLib}/${role}.kurenma.src

  . ${_kurenma_pathLib}/${role}.kurenma.src

  trap kurenma-daemon::signal 31

  kurenma-daemon::service

  ini.free

  std::finally "service down,"

}
#
#
#
kurenma-daemon::main
#
